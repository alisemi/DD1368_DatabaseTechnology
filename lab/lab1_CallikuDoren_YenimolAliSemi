/*
1. 
Generate a list of all countries that do not have any islands.
*/
SELECT name FROM Country EXCEPT SELECT name FROM Country WHERE EXISTS (SELECT country FROM geo_Island WHERE country = Country.code) ORDER BY name;


/*
2. 
Generate the ratio between inland provinces (provinces not bordering any sea) to total number of provinces.
*/
SELECT 1.0 * ( 
WITH Province_CTE AS(
	SELECT name FROM Province EXCEPT SELECT name FROM Province WHERE EXISTS ( SELECT province FROM geo_Sea WHERE province = Province.name)) 
SELECT COUNT(name) FROM Province_CTE)/(SELECT COUNT(name) FROM Province) as ratio;


/*
3. 
Generate a table of all the continents and the sum of the areas of all those lakes that contain
at least one island for each continent. If a lake is in a country that is situated on several
continents, the appropriate share of the lake area should be counted for each of those
continents.
*/
WITH 
country_CTE   AS(
	SELECT DISTINCT lake,country FROM geo_Lake WHERE EXISTS (SELECT lake FROM islandIn WHERE lake = geo_Lake.lake) ) ,
continent_CTE AS(
	SELECT country_CTE.lake as lakeContinent, country_CTE.country, encompasses.continent, encompasses.percentage FROM encompasses, country_CTE WHERE EXISTS (SELECT country FROM country_CTE WHERE encompasses.country = country_CTE.country) ),
confedera_CTE AS(
	SELECT * FROM continent_CTE INNER JOIN country_CTE ON continent_CTE.country = country_CTE.country),
result_CTE    AS(
 	SELECT Lake.name, Lake.area, confedera_CTE.continent, confedera_CTE.percentage FROM Lake INNER JOIN confedera_CTE ON Lake.name = confedera_CTE.lakeContinent)   
SELECT result_CTE.continent, SUM(result_CTE.percentage * result_CTE.area / 100.0) FROM result_CTE GROUP BY result_CTE.continent;


WITH
country_CTE   AS(
        SELECT DISTINCT lake,country FROM geo_Lake WHERE EXISTS (SELECT lake FROM islandIn WHERE lake = geo_Lake.lake) ) ,
continent_CTE AS(
        SELECT country_CTE.lake as lakeContinent, country_CTE.country, encompasses.continent, encompasses.percentage FROM encompasses, country_CTE WHERE EXISTS (SELECT country FROM country_CTE WHERE encompasses.country = country_CTE.country) ),
confedera_CTE AS(
	SELECT continent_CTE.lakeContinent, continent_CTE.continent, continent_CTE.percentage  FROM continent_CTE INNER JOIN country_CTE ON continent_CTE.country = country_CTE.country GROUP BY continent_CTE.lakeContinent, continent_CTE.continent, continent_CTE.percentage),
result_CTE    AS(
 	SELECT Lake.name, Lake.area, confedera_CTE.continent, confedera_CTE.percentage FROM Lake INNER JOIN confedera_CTE ON Lake.name = confedera_CTE.lakeContinent)   
SELECT result_CTE.continent, SUM(result_CTE.percentage * result_CTE.area / 100.0) FROM result_CTE GROUP BY result_CTE.continent;

/*
4. 
Generate a table with the two continents that will have the largest and the smallest
population increase fifty years from now given current population and growth rates, and the
future population to current population ratios for these two continents.
*/
WITH 
primary_CTE AS 
	( SELECT Country.name,Country.population,Country.code,encompasses.continent FROM Country INNER JOIN encompasses ON encompasses.country = Country.code),
result_CTE AS
	( SELECT  primary_CTE.continent, primary_CTE.name,primary_CTE.population,Population.population_growth FROM primary_CTE INNER JOIN Population ON code=Population.country),
secondary_CTE AS
	( SELECT result_CTE.continent, SUM(result_CTE.population*((1+0.01*result_CTE.population_growth)^50)) AS futurePopulation,SUM(result_CTE.population) AS presentPopulation,SUM(result_CTE.population*((1+0.01*result_CTE.population_growth)^50))/SUM(result_CTE.population) AS ratio, (SUM(result_CTE.population*((1+0.01*result_CTE.population_growth)^50))-SUM(result_CTE.population)) AS increase FROM result_CTE GROUP BY result_CTE.continent)
SELECT secondary_CTE.continent, secondary_CTE.increase, secondary_CTE.ratio FROM secondary_CTE WHERE secondary_CTE.ratio >= ALL( SELECT secondary_CTE.ratio FROM secondary_CTE) OR secondary_CTE.ratio <= ALL( SELECT secondary_CTE.ratio FROM secondary_CTE); 


/*
5. 
Generate the name of the organisation that is headquartered in Europe, has International in
its name and has the largest number of European member countries.
*/
WITH 
primary_CTE AS   
	( SELECT Country.code, isMember.organization FROM Country INNER JOIN isMember ON Country.code = isMember.country), 
secondary_CTE AS 
	( SELECT primary_CTE.organization, Organization.country, Organization.name, primary_CTE.code FROM Organization INNER JOIN primary_CTE ON primary_CTE.organization = Organization.abbreviation),
tertiary_CTE AS 
	(SELECT secondary_CTE.organization, secondary_CTE.name, secondary_CTE.country, secondary_CTE.code, encompasses.continent FROM secondary_CTE INNER JOIN encompasses ON secondary_CTE.country = encompasses.country WHERE encompasses.continent LIKE '%Europe%' AND secondary_CTE.name LIKE '%International%'),
fourth_CTE AS
	( SELECT tertiary_CTE.organization, tertiary_CTE.name, encompasses.continent FROM tertiary_CTE INNER JOIN encompasses ON tertiary_CTE.code=encompasses.country ),
fifth_CTE AS
	( SELECT fourth_CTE.name, COUNT(fourth_CTE.continent) AS count FROM fourth_CTE WHERE fourth_CTE.continent LIKE '%Europe%' GROUP BY fourth_CTE.name)
SELECT fifth_CTE.name FROM fifth_CTE WHERE count >= ALL(SELECT fifth_CTE.count FROM fifth_CTE);


/*
6. 
Generate a table of city names and related airport names for all the cities that have at least
100,000 inhabitants, are situated in America and where the airport is elevated above 500 m.
*/
WITH 
primary_CTE AS 
	( SELECT Airport.country, Airport.city, Airport.name, Airport.elevation, encompasses.continent FROM Airport INNER JOIN encompasses ON Airport.country = encompasses.country),
secondary_CTE AS 
	( SELECT primary_CTE.city, primary_CTE.name , primary_CTE.elevation, primary_CTE.continent, City.population  FROM City INNER JOIN primary_CTE ON primary_CTE.city = City.name) 
SELECT DISTINCT secondary_CTE.city, secondary_CTE.name AS AirportName FROM secondary_CTE WHERE secondary_CTE.continent LIKE 'America' AND secondary_CTE.population>100000 AND secondary_CTE.elevation > 500;


/*
7. 
Generate a table of countries and the ratio between their latest reported and earliest
reported population figures, rounded to one decimal point, for those countries where this ratio
is above 10, that is to say those that have grown at least 10-fold between earliest and latest
population count.
*/
WITH 
primary_CTE AS 
	( SELECT country, MAX(year) AS year FROM Countrypops GROUP BY country UNION ALL SELECT country, MIN(year) AS year FROM Countrypops GROUP BY country ORDER BY country),
secondary_CTE AS 
	( SELECT primary_CTE.country, primary_CTE.year ,population FROM primary_CTE INNER JOIN Countrypops ON Countrypops.country = primary_CTE.country AND Countrypops.year = primary_CTE.year), 
tertiary AS 
	( SELECT secondary_CTE.country, MAX(secondary_CTE.population),MIN(secondary_CTE.population) FROM secondary_CTE GROUP BY country) 
SELECT tertiary.country, ROUND((tertiary.max/tertiary.min) ::numeric,1) AS ratio FROM tertiary WHERE (ROUND((tertiary.max/tertiary.min) ::numeric,1) > 10);


/*
8. 
Generate a table with the three (3) cities above 5,000,000 inhabitants that form the largest
triangle between them, measured as the total length of all three triangle legs, and that total
length. Your solution should be on the output form:

Name 1       |      Name 2 |       Name 3 | TotDist
------------------------------------------------------
Bagginsville | Mordor City | Minas Tirith | 1234567.2

You are allowed to treat the world as a Mercator projection for purposes of calculating
distances, that is, to use the distance formulas for a plane, but you must consider that the
north/south edges and the east/west edges, respectively, meet and handle that. Any solution
that counts two cities just on each side of the date line as a world apart, for instance, is wrong
and will not be admitted. Your solution is allowed to contain duplicate rows of the same
cities. 
Hint 1: Filter out the cities matching the condition first! 
Hint 2: Solve the simpler problem of calculating the two cities furthest apart under the above conditions first.
*/
WITH 
city_distance AS
	( SELECT name, MAX (SQRT( (ABS(latitude-x2)* 111) ^ 2 + (ABS(longitude-y2)*111) ^ 2)) OVER ( PARTITION BY name, other) AS distance, other FROM City, (SELECT name AS other, latitude AS x2, longitude AS y2 FROM City WHERE population > 5000000 /*Hint 1*/)AS FOO WHERE population > 5000000 /*Hint 2*/ GROUP BY name, other, latitude, foo.x2, longitude, foo.y2),
city_triangle AS
	( SELECT DISTINCT A.name AS first, B.name AS second, C.name AS third, SUM(A.distance + B.distance + C.distance) AS total  FROM city_distance A, city_distance B, city_distance C WHERE A.other = B.name AND B.other = C.name AND C.other = A.name GROUP BY A.name, B.name, C.name)
SELECT a.first, a.second, a.third, a.total  FROM city_triangle a INNER JOIN ( SELECT MAX(total) AS total FROM city_triangle)b ON a.total = b.total;


/*
9. 
Generate a table that contains the rivers Rhein, Nile and Amazonas, and the longest total
length that the river systems feeding into each of them contain (including their own
respective length). You must calculate the respective river systems of tributary rivers
recursively.
*/
WITH maxfeed_nile AS
(
WITH RECURSIVE result AS(
    SELECT name, length AS n, river FROM River WHERE river = 'Nile'                                      
    UNION
    SELECT r.name,n + r.length AS n, r.river FROM River r INNER JOIN result res ON res.name = r.river) 
	SELECT max(n)+ length AS n  FROM result, River WHERE River.name = 'Nile' GROUP BY River.length),
maxfeed_rhein AS (
WITH RECURSIVE result AS(
    SELECT name, length AS n, river FROM River WHERE river = 'Rhein'                                      
    UNION
    SELECT r.name,n + r.length AS n, r.river FROM River r INNER JOIN result res ON res.name = r.river)
	SELECT max(n)+ length AS n  FROM result, River WHERE River.name = 'Rhein' GROUP BY River.length),
maxfeed_amazonas AS (
WITH RECURSIVE result AS(
    SELECT name, length AS n, river FROM River WHERE river = 'Amazonas'                                      
    UNION
    SELECT r.name,n + r.length AS n, r.river FROM River r INNER JOIN result res ON res.name = r.river) 
	SELECT max(n)+ length AS n  FROM result, River WHERE River.name = 'Amazonas' GROUP BY River.length)
SELECT maxfeed_nile.n AS Nile, maxfeed_rhein.n AS Rhein, maxfeed_amazonas.n AS Amazonas FROM maxfeed_nile, maxfeed_rhein, maxfeed_amazonas WHERE 1=1;



